Class  
	A class is the blueprint from which individual objects are created.
	extends should be before implements
	
	Instance/Member variables: class fields
	Local variable: declared inside method of block
	Parameter: method declaration variables
	arguments: actual variables passed during invoking method
	
Constructor : 
	will call non argument constructor of super class
	super() or this() should be placed in first line
	super() or this() can't be used in same constructor
	
Access Modifiers : 
	At the top level—public, or package-private (no explicit modifier). (class)
	At the member level—public, private, protected, or package-private (no explicit modifier).
	
Nested Classes : 
	Static
	Inner classes
	
Local Classes : 
	decelare class inside method
	anonymous classes
	
Inheritance : 
	return type : can return subtype (covariant return type)
	Access modifier : can increase

Thread : 
	Threads calling non-static synchronized methods in the same class will only block each other if they're invoked using the same 			instance. That's because they each lock on this instance, and if they're called using two different instances, they get 		two locks, which do not interfere with each other.
	Threads calling static synchronized methods in the same class will always block each other—they all lock on the same Class 			instance.
	A static synchronized method and a non-static synchronized method will not block each other, ever. The static method locks on a 		Class instance while the non-static method locks on the this instance—these actions do not interfere with each other at 		all.
